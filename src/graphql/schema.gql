# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Channel {
  createdAt: DateTime!
  description: String
  id: ID!
  name: String
  owner: User
  ownerId: String
  type: ChannelType!
  updatedAt: DateTime!
  users(orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]
}

input ChannelOrderByWithRelationInput {
  createdAt: SortOrder
  description: SortOrderInput
  id: SortOrder
  name: SortOrderInput
  owner: UserOrderByWithRelationInput
  ownerId: SortOrderInput
  type: SortOrder
  updatedAt: SortOrder
}

enum ChannelType {
  GROUP
  PRIVATE
  PUBLIC
}

input ChannelWhereInput {
  AND: [ChannelWhereInput!]
  NOT: [ChannelWhereInput!]
  OR: [ChannelWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  name: StringFilter
  owner: UserWhereInput
  ownerId: StringFilter
  type: EnumChannelTypeFilter
  updatedAt: DateTimeFilter
  users: UserListRelationFilter
}

input CreateChannelInput {
  name: String
  type: ChannelType!
  userIds: [String!]
}

input CreateUserData {
  email: String!
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTimeFilter
  notIn: [DateTime!]
}

input EnumChannelTypeFilter {
  equals: ChannelType
  in: [ChannelType!]
  not: EnumChannelTypeFilter
  notIn: [ChannelType!]
}

type FindManyChannelsObject {
  channels: [Channel!]!
  count: Int!
}

type FindManyUserObject {
  count: Int!
  users: [User!]!
}

type Mutation {
  createChannel(data: CreateChannelInput!): Channel
  createUser(data: CreateUserData!): User
  deleteChannel(id: String!): Boolean
  deleteUser: User
  joinChannel(id: String!, userIds: [String!]!): Boolean
  leaveChannel(id: String!, userIds: [String!]!): Boolean
  login(email: String!, password: String!): User
  logout: Boolean
  refreshTokens: Boolean
  revokeRefreshToken(refreshTokenId: String!): Boolean
  updateChannel(data: UpdateChannelData!, id: String!): Channel
  updateUser(data: UpdateUserData!): User
  updateUserPassword(data: UpdateUserPasswordInput!): Boolean
}

enum NullsOrder {
  first
  last
}

type Query {
  getChannel(id: String!): Channel
  getChannels(orderBy: [ChannelOrderByWithRelationInput!], skip: Int, take: Int, where: ChannelWhereInput): FindManyChannelsObject
  getUser(where: UserWhereUniqueInput!): User
  getUsers(orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): FindManyUserObject
  profile: User
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: StringFilter
  notIn: [String!]
  startsWith: String
}

input UpdateChannelData {
  description: [String!]
  name: String
  ownerId: String
}

input UpdateUserData {
  avatar: Upload
  email: String
  name: String
  username: String
}

input UpdateUserPasswordInput {
  confirmPassword: String!
  oldPassword: String!
  password: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  avatarKey: String
  avatarUrl: String
  channels(orderBy: [ChannelOrderByWithRelationInput!], skip: Int, take: Int, where: ChannelWhereInput): [Channel!]
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String
  ownerChannels(orderBy: [ChannelOrderByWithRelationInput!], skip: Int, take: Int, where: ChannelWhereInput): [Channel!]
  updatedAt: DateTime!
  username: String!
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrderInput
  updatedAt: SortOrder
  username: SortOrder
}

input UserOrderByWithRelationInput {
  avatarKey: SortOrderInput
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrderInput
  password: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
  username: String
}