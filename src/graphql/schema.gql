# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateUserData {
  email: String!
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTimeFilter
  notIn: [DateTime!]
}

type FindManyUserObject {
  count: Int!
  users: [User!]!
}

type Mutation {
  createUser(data: CreateUserData!): User
  deleteUser: User
  login(email: String!, password: String!): User
  logout: Boolean
  refreshTokens: Boolean
  revokeRefreshToken(refreshTokenId: String!): Boolean
  updateUser(data: UpdateUserData!): User
  updateUserPassword(data: UpdateUserPasswordInput!): Boolean
}

enum NullsOrder {
  first
  last
}

type Query {
  getUser(where: UserWhereUniqueInput!): User
  getUsers(orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): FindManyUserObject
  profile: User
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: StringFilter
  notIn: [String!]
  startsWith: String
}

input UpdateUserData {
  avatar: Upload
  email: String
  name: String
  username: String
}

input UpdateUserPasswordInput {
  confirmPassword: String!
  oldPassword: String!
  password: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  avatarKey: String
  avatarUrl: String
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String
  updatedAt: DateTime!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrderInput
  updatedAt: SortOrder
  username: SortOrder
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
  username: String
}